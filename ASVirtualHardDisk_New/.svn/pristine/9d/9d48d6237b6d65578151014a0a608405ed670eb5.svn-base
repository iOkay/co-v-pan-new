//
//  ASPreferencesViewController.m
//  ASVirtualHardDisk
//
//  Created by dhc on 11-12-8.
//  Copyright 2011å¹´ AlphaStudio. All rights reserved.
//

#import "ASPreferencesViewController.h"
#import "ASLocalDefine.h"
#import "ASServerInfo.h"


@implementation ASPreferencesViewController

@synthesize preferencesTableView;
@synthesize totalSpace;
@synthesize freeSpace;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        self.navigationItem.title = localeString(KPreferences);
    }
    return self;
}

- (void)dealloc
{
    singleTap.delegate = nil;
    nickNameLabel.delegate = nil;
    [totalSpace release];
    [freeSpace release];
    [singleTap release];
    [preferencesTableView release];
    
    [super dealloc];
}

- (void)didReceiveMemoryWarning
{
    self.totalSpace = nil;
    self.freeSpace = nil;
    self.preferencesTableView = nil;
    singleTap.delegate = nil;
    nickNameLabel.delegate = nil;
    singleTap = nil;
    nickNameLabel = nil;
    
    [super didReceiveMemoryWarning];
}

- (void) handleSingleTap
{
    [nickNameLabel resignFirstResponder];
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{
    [super viewDidLoad];
    singleTap = 
    [[UITapGestureRecognizer alloc] initWithTarget:self
                                            action:@selector(handleSingleTap)];
    [self.view addGestureRecognizer:singleTap];
    singleTap.delegate = self;
    singleTap.cancelsTouchesInView = NO;
    
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.navigationController setToolbarHidden:YES];
    
    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleBlackOpaque];
    [[UIApplication sharedApplication] setStatusBarHidden:NO];
    
    self.navigationController.navigationBar.hidden = NO;
    self.navigationController.navigationBar.tintColor = [UIColor blackColor];
    self.navigationController.navigationBar.alpha = 0.9;
    self.navigationController.navigationBar.barStyle = UIBarStyleBlack;
    self.navigationController.navigationBar.opaque = NO;
    self.navigationController.navigationBar.translucent = NO;
    
    NSDictionary *fattributes = [[NSFileManager defaultManager] 
                                 attributesOfFileSystemForPath: NSHomeDirectory() error: nil];
    NSNumber *totalSpaceNumber = (NSNumber*)[fattributes objectForKey: NSFileSystemSize];
    
    NSNumber *freeSpaceNumber = (NSNumber*)[fattributes objectForKey: NSFileSystemFreeSize];
    
    self.totalSpace = [NSString stringWithFormat: @"%.2f GB", (double)[totalSpaceNumber longLongValue]/(double)(1024*1024*1024)];
    self.freeSpace = [NSString stringWithFormat: @"%.2f GB", (double)[freeSpaceNumber longLongValue]/(double)(1024*1024*1024)];
}

- (void)viewDidUnload
{
    self.totalSpace = nil;
    self.freeSpace = nil;
    self.preferencesTableView = nil;
    singleTap = nil;
    nickNameLabel.delegate = nil;
    nickNameLabel = nil;
    
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return YES;
}

#pragma mark -
#pragma mark UITextField Delegate Method
- (void)textFieldDidEndEditing:(UITextField *)textField
{
    ASServerInfo *serverInfo = [ASServerInfo singletonServer];
    serverInfo.serverName = nickNameLabel.text;
    [serverInfo recordStatusOfServer];
    [nickNameLabel resignFirstResponder];
}

#pragma mark -
#pragma mark UITableView Delegate
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 2;
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    if (1 == section)
    {
        return localeString(KDriveInfo);
    }
    return nil;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (0 == section)
    {
        return 1;
    }
    else if(1 == section)
    {
        return 2;
    }
    else
    {
        return 0;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellIdentifier = @"PreferencesTableViewCell";

    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    if (cell == nil)
    {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault 
                                       reuseIdentifier:cellIdentifier] autorelease];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
    }

    if (0 == [indexPath section])
    {
        UILabel *nickNameTitleLabel = [[UILabel alloc] init];
        nickNameTitleLabel.text = localeString(KNickNameTitle);
        nickNameTitleLabel.backgroundColor = [UIColor clearColor];
        [nickNameTitleLabel setFrame: CGRectMake(10, 5, 160, 30)];
        [cell.contentView addSubview: nickNameTitleLabel];
        [nickNameTitleLabel release];
        
        nickNameLabel = [[UITextField alloc] 
                         initWithFrame:CGRectMake(100, 10, 160, 30)];
        nickNameLabel.delegate = self;
        nickNameLabel.backgroundColor = [UIColor clearColor];
        nickNameLabel.text = [[ASServerInfo singletonServer] serverName];
        [cell.contentView addSubview: nickNameLabel];
        
        nickNameLabel.keyboardType = UIKeyboardTypeDefault;
        nickNameLabel.returnKeyType = UIReturnKeyDone;
        
        [nickNameLabel addTarget:self action:@selector(textFieldDidEndEditing:)
                forControlEvents:UIControlEventEditingDidEndOnExit];
        
        [nickNameLabel release];
    }
    else if(1 == [indexPath section])
    {
        if (0 == [indexPath row])
        {
            UILabel *totalSpaceTitleLabel = [[UILabel alloc] init];
            totalSpaceTitleLabel.backgroundColor = [UIColor clearColor];
            totalSpaceTitleLabel.text = localeString(KTotalSpace);
            [totalSpaceTitleLabel setFrame: CGRectMake(10, 10, 170, 30)];
            [cell.contentView addSubview: totalSpaceTitleLabel];
            [totalSpaceTitleLabel release];
            
            UILabel *totalSpaceLabel = [[UILabel alloc] init];
            totalSpaceLabel.backgroundColor = [UIColor clearColor];
            totalSpaceLabel.text = self.totalSpace;
            [totalSpaceLabel setFrame: CGRectMake(180, 10, 100, 30)];
            [cell.contentView addSubview: totalSpaceLabel];
            [totalSpaceLabel release];
        }
        else if(1 == [indexPath row])
        {
            UILabel *freeSpaceTitleLabel = [[UILabel alloc] init];
            freeSpaceTitleLabel.backgroundColor = [UIColor clearColor];
            freeSpaceTitleLabel.text = localeString(KFreeSpace);
            [freeSpaceTitleLabel setFrame: CGRectMake(10, 10, 170, 30)];
            [cell.contentView addSubview: freeSpaceTitleLabel];
            [freeSpaceTitleLabel release];
            
            UILabel *freeSpaceLabel = [[UILabel alloc] init];
            freeSpaceLabel.backgroundColor = [UIColor clearColor];
            freeSpaceLabel.text = self.freeSpace;
            [freeSpaceLabel setFrame: CGRectMake(180, 10, 100, 30)];
            [cell.contentView addSubview: freeSpaceLabel];
            [freeSpaceLabel release];
        }
    }

    return cell;
}

-(NSIndexPath*)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    return nil;
}

@end
